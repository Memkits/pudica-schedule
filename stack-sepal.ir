{:package "client",
 :files {"comp.container" {:ns ["ns"
                                "client.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "client.comp.todolist" ":refer" ["[]" "comp-todolist"]]]],
                           :defs {"comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["state" "mutate!"]
                                                       ["div"
                                                        ["{}"
                                                         [":style"
                                                          ["merge" "ui/global" "ui/fullscreen" "style-container"]]]
                                                        ["comp-todolist" [":tasks" "store"]]]]]]],
                                  "style-container" ["def"
                                                     "style-container"
                                                     ["{}"
                                                      [":background-image" "|url(\"peach.jpg\")"]
                                                      [":background-size" ":cover"]
                                                      [":background-position" ":center"]
                                                      [":color" ":white"]]]},
                           :procs []},
         "main" {:ns ["ns"
                      "client.main"
                      [":require"
                       ["[]"
                        "respo.core"
                        ":refer"
                        ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]]
                       ["[]" "client.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "client.updater.core" ":refer" ["[]" "updater"]]
                       ["[]" "client.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["println" "|Dispatch:" "op" "op-data"]
                                     ["let"
                                      [["new-store" ["updater" "@store-ref" "op" "op-data" [".now" "js/Date"]]]]
                                      ["--" "println" "|New store:" "new-store"]
                                      ["reset!" "store-ref" "new-store"]]],
                        "-main!" ["defn"
                                  "-main!"
                                  []
                                  ["enable-console-print!"]
                                  ["if"
                                   ["not" ["empty?" "ssr-stages"]]
                                   ["let"
                                    [["target" [".querySelector" "js/document" "|#app"]]]
                                    ["falsify-stage!"
                                     "target"
                                     ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"]
                                     "dispatch!"]]]
                                  ["render-app!"]
                                  ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]]
                                  ["add-watch" "store-ref" ":changes" "render-app!"]
                                  ["add-watch" "states-ref" ":changes" "render-app!"]
                                  ["println" "|App started!"]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|Code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]],
                        "ssr-stages" ["def"
                                      "ssr-stages"
                                      ["let"
                                       [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]]
                                        ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]]
                                       ["read-string" "ssr-markup"]]],
                        "store-ref" ["defonce" "store-ref" ["atom" "schema/store"]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]]},
                 :procs [["set!" [".-onload" "js/window"] "-main!"]]},
         "comp.todolist" {:ns ["ns"
                               "client.comp.todolist"
                               [":require"
                                ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                ["[]" "respo-ui.style" ":as" "ui"]
                                ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input" "button"]]
                                ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                ["[]" "client.comp.task" ":refer" ["[]" "comp-task"]]
                                ["[]" "clojure.string" ":as" "string"]]],
                          :defs {"comp-todolist" ["def"
                                                  "comp-todolist"
                                                  ["create-comp"
                                                   ":todolist"
                                                   ["fn"
                                                    ["tasks"]
                                                    ["fn"
                                                     ["state" "mutate!"]
                                                     ["div"
                                                      ["{}" [":style" "style-container"]]
                                                      ["div"
                                                       ["{}"
                                                        [":style"
                                                         ["merge"
                                                          "style-list"
                                                          ["{}"
                                                           [":height"
                                                            ["str" ["+" "8" ["*" "40" ["count" "tasks"]]] "|px"]]]]]]
                                                       ["->>"
                                                        "tasks"
                                                        ["map-indexed"
                                                         ["fn"
                                                          ["idx" "task"]
                                                          ["[]" [":id" "task"] ["comp-task" "task" "idx"]]]]
                                                        ["sort-by" "first"]]]]]]]],
                                 "style-container" ["def"
                                                    "style-container"
                                                    ["{}" [":min-height" "100"] [":min-width" "400"] [":padding" "16"]]],
                                 "style-list" ["def" "style-list" ["{}" [":position" ":relative"]]]},
                          :procs []},
         "schema" {:ns ["ns" "client.schema"],
                   :defs {"task" ["def" "task" ["{}" [":id" "nil"] [":text" "|"] [":done?" "false"]]],
                          "store" ["def" "store" ["{}" [":tasks" ["[]"]] [":pointer" "0"]]]},
                   :procs []},
         "updater.core" {:ns ["ns" "client.updater.core" [":require" ["[]" "client.schema" ":as" "schema"]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op" "op-data" "op-time"]
                                           ["case"
                                            "op"
                                            [":task/add-before" ["add-before" "store" "op-data" "op-time"]]
                                            [":task/add-after" ["add-after" "store" "op-data" "op-time"]]
                                            [":task/edit"
                                             ["let"
                                              [[["[]" "idx" "text"] "op-data"]]
                                              ["update"
                                               "store"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["update" "tasks" "idx" ["fn" ["task"] ["assoc" "task" ":text" "text"]]]]]]]
                                            [":task/toggle"
                                             ["update-in" "store" ["[]" ":tasks" "op-data" ":done?"] "not"]]
                                            [":task/delete"
                                             ["if"
                                              ["=" "1" ["count" [":tasks" "store"]]]
                                              "store"
                                              ["cond"
                                               [["zero?" "op-data"]
                                                ["update" "store" ":tasks" ["fn" ["tasks"] ["subvec" "tasks" "1"]]]]
                                               [["=" "op-data" ["dec" ["count" [":tasks" "store"]]]]
                                                ["update"
                                                 "store"
                                                 ":tasks"
                                                 ["fn" ["tasks"] ["subvec" "tasks" "0" ["dec" ["count" "tasks"]]]]]]
                                               [":else"
                                                ["update"
                                                 "store"
                                                 ":tasks"
                                                 ["fn"
                                                  ["tasks"]
                                                  ["into"
                                                   ["[]"]
                                                   ["concat"
                                                    ["subvec" "tasks" "0" "op-data"]
                                                    ["subvec" "tasks" ["inc" "op-data"]]]]]]]]]]
                                            "store"]],
                                "add-before" ["defn"
                                              "add-before"
                                              ["store" "idx" "op-time"]
                                              ["update"
                                               "store"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["let"
                                                 [["new-task"
                                                   ["merge" "schema/task" ["{}" [":id" "op-time"] [":text" "|"]]]]]
                                                 ["cond"
                                                  [["zero?" "idx"] ["into" ["[]"] ["cons" "new-task" "tasks"]]]
                                                  [":else"
                                                   ["into"
                                                    ["[]"]
                                                    ["concat"
                                                     ["subvec" "tasks" "0" "idx"]
                                                     ["[]" "new-task"]
                                                     ["subvec" "tasks" "idx"]]]]]]]]],
                                "add-after" ["defn"
                                             "add-after"
                                             ["store" "idx" "op-time"]
                                             ["update"
                                              "store"
                                              ":tasks"
                                              ["fn"
                                               ["tasks"]
                                               ["let"
                                                [["new-task"
                                                  ["merge" "schema/task" ["{}" [":id" "op-time"] [":text" "|"]]]]]
                                                ["cond"
                                                 [["=" "idx" ["dec" ["count" "tasks"]]] ["conj" "tasks" "new-task"]]
                                                 [":else"
                                                  ["into"
                                                   ["[]"]
                                                   ["concat"
                                                    ["subvec" "tasks" "0" ["inc" "idx"]]
                                                    ["[]" "new-task"]
                                                    ["subvec" "tasks" ["inc" "idx"]]]]]]]]]]},
                         :procs []},
         "comp.task" {:ns ["ns"
                           "client.comp.task"
                           [":require"
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo-ui.style" ":as" "ui"]
                            ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                            ["[]" "clojure.string" ":as" "string"]]],
                      :defs {"on-input" ["defn"
                                         "on-input"
                                         ["idx"]
                                         ["fn" ["e" "dispatch!"] ["dispatch!" ":task/edit" ["[]" "idx" [":value" "e"]]]]],
                             "style-task" ["def"
                                           "style-task"
                                           ["{}"
                                            [":position" ":absolute"]
                                            [":background-color" ["hsl" "0" "0" "0" "0.8"]]
                                            [":padding" "|8px"]
                                            [":transition-duration" "|300ms"]]],
                             "on-pick" ["defn"
                                        "on-pick"
                                        ["task-id"]
                                        ["fn" ["e" "dispatch!"] ["println" "|Task id:" "task-id"]]],
                             "on-release" ["defn"
                                           "on-release"
                                           ["task-id"]
                                           ["fn" ["e" "dispatch!"] ["println" "|Release:" "task-id"]]],
                             "style-done" ["def"
                                           "style-done"
                                           ["{}"
                                            [":width" "32"]
                                            [":height" "32"]
                                            [":background-color" ["hsl" "120" "80" "60"]]
                                            [":cursor" ":pointer"]]],
                             "comp-task" ["def"
                                          "comp-task"
                                          ["create-comp"
                                           ":task"
                                           ["fn"
                                            ["task" "idx"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["println" "|Task" "task"]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "ui/row"
                                                 "style-task"
                                                 ["{}" [":top" ["str" ["+" "8" ["*" "idx" "48"]] "|px"]]]
                                                 ["if" [":done?" "task"] ["{}" [":margin-left" "32"]]]]]
                                               [":event"
                                                ["{}"
                                                 [":pointerdown" ["on-pick" [":id" "task"]]]
                                                 [":pointerup" ["on-release" [":id" "task"]]]]]]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["merge"
                                                  "style-done"
                                                  ["if"
                                                   [":done?" "task"]
                                                   ["{}" [":background-color" ["hsl" "120" "80" "30"]]]]]]
                                                [":event" ["{}" [":click" ["on-toggle" "idx"]]]]]]
                                              ["comp-space" "8" "nil"]
                                              ["input"
                                               ["{}"
                                                [":style" ["merge" "ui/input" "style-text"]]
                                                [":attrs"
                                                 ["{}" [":value" [":text" "task"]] [":placeholder" "|Task content"]]]
                                                [":event"
                                                 ["{}"
                                                  [":input" ["on-input" "idx"]]
                                                  [":blur" ["on-blur" ["string/blank?" [":text" "task"]] "idx"]]
                                                  [":keydown" ["on-keydown" "idx"]]]]]]]]]]],
                             "on-toggle" ["defn"
                                          "on-toggle"
                                          ["idx"]
                                          ["fn" ["e" "dispatch!"] ["dispatch!" ":task/toggle" "idx"]]],
                             "on-blur" ["defn"
                                        "on-blur"
                                        ["cleared?" "idx"]
                                        ["fn" ["e" "dispatch!"] ["if" "cleared?" ["dispatch!" ":task/delete" "idx"]]]],
                             "style-text" ["def" "style-text" ["{}" [":width" "320"]]],
                             "on-keydown" ["defn"
                                           "on-keydown"
                                           ["idx"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["if"
                                             ["=" "13" [":key-code" "e"]]
                                             ["let"
                                              [["event" [":original-event" "e"]]]
                                              ["if"
                                               [".-shiftKey" "event"]
                                               ["dispatch!" ":task/add-before" "idx"]
                                               ["dispatch!" ":task/add-after" "idx"]]]]]]},
                      :procs []}}}
