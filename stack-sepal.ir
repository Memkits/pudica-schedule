{:package "client",
 :files {"comp.container" {:ns ["ns"
                                "client.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "button"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "client.comp.todolist" ":refer" ["[]" "comp-todolist"]]]],
                           :defs {"comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["state" "mutate!"]
                                                       ["div"
                                                        ["{}"
                                                         [":style"
                                                          ["merge" "ui/global" "ui/fullscreen" "style-container"]]]
                                                        ["comp-todolist" [":tasks" "store"] [":pointer" "store"]]
                                                        ["button"
                                                         ["{}"
                                                          [":style" ["merge" "ui/button" "style-clear"]]
                                                          [":attrs" ["{}" [":inner-text" "|Clear"]]]
                                                          [":event" ["{}" [":click" "on-clear"]]]]]]]]]],
                                  "style-container" ["def"
                                                     "style-container"
                                                     ["{}"
                                                      [":background-image" "|url(\"sky.jpg\")"]
                                                      [":background-size" ":cover"]
                                                      [":background-position" "|left top"]
                                                      [":color" ":white"]
                                                      [":overflow" ":hidden"]]],
                                  "style-clear" ["def"
                                                 "style-clear"
                                                 ["{}"
                                                  [":position" ":fixed"]
                                                  [":bottom" "0"]
                                                  [":left" "0"]
                                                  [":background-color" ":transparent"]
                                                  [":color" ["hsl" "0" "0" "100" "0.2"]]]],
                                  "on-clear" ["defn" "on-clear" ["e" "dispatch!"] ["dispatch!" ":task/clear" "nil"]]},
                           :procs []},
         "main" {:ns ["ns"
                      "client.main"
                      [":require"
                       ["[]"
                        "respo.core"
                        ":refer"
                        ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]]
                       ["[]" "client.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "client.updater.core" ":refer" ["[]" "updater"]]
                       ["[]" "client.schema" ":as" "schema"]
                       ["[]" "client.manager" ":refer" ["[]" "listen-wheel!"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["println" "|Dispatch:" "op" "op-data"]
                                     ["let"
                                      [["new-store" ["updater" "@store-ref" "op" "op-data" [".now" "js/Date"]]]]
                                      ["--" "println" "|New store:" "new-store"]
                                      ["reset!" "store-ref" "new-store"]]],
                        "-main!" ["defn"
                                  "-main!"
                                  []
                                  ["enable-console-print!"]
                                  ["if"
                                   ["not" ["empty?" "ssr-stages"]]
                                   ["let"
                                    [["target" [".querySelector" "js/document" "|#app"]]]
                                    ["falsify-stage!"
                                     "target"
                                     ["render-element" ["comp-container" "schema/store" "ssr-stages"] "states-ref"]
                                     "dispatch!"]]]
                                  ["render-app!"]
                                  ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]]
                                  ["add-watch" "store-ref" ":changes" "render-app!"]
                                  ["add-watch" "store-ref" ":focus" "adjust-focus!"]
                                  ["add-watch" "states-ref" ":changes" "render-app!"]
                                  ["listen-wheel!"]
                                  ["println" "|App started!"]],
                        "adjust-focus!" ["defn"
                                         "adjust-focus!"
                                         []
                                         ["js/setTimeout"
                                          ["fn"
                                           []
                                           ["let"
                                            [["pointer" [":pointer" "@store-ref"]]
                                             ["maybe-input"
                                              [".getElementById" "js/document" ["str" "|input-" "pointer"]]]]
                                            ["--" "println" "|Focus to:" "pointer" "maybe-input"]
                                            ["if"
                                             ["and"
                                              ["some?" "maybe-input"]
                                              ["not=" "maybe-input" [".-activeElement" "js/document"]]]
                                             [".focus" "maybe-input"]]]]]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]
                                        ["--" "println" "|Finished rerendering!"]]],
                        "store-ref" ["defonce"
                                     "store-ref"
                                     ["atom"
                                      ["let"
                                       [["old-data" [".getItem" "js/localStorage" "|pudica-schedule"]]]
                                       [".log" "js/console" "|Old data:" "old-data"]
                                       ["if" ["some?" "old-data"] ["read-string" "old-data"] "schema/store"]]]],
                        "save-store!" ["defn"
                                       "save-store!"
                                       []
                                       ["let"
                                        [["raw" ["pr-str" "@store-ref"]]]
                                        [".setItem" "js/localStorage" "|pudica-schedule" "raw"]]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|Code updated."]],
                        "ssr-stages" ["def"
                                      "ssr-stages"
                                      ["let"
                                       [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]]
                                        ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]]
                                       ["read-string" "ssr-markup"]]]},
                 :procs [["set!" [".-onload" "js/window"] "-main!"]
                         ["set!" [".-onbeforeunload" "js/window"] "save-store!"]]},
         "comp.todolist" {:ns ["ns"
                               "client.comp.todolist"
                               [":require"
                                ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                ["[]" "respo-ui.style" ":as" "ui"]
                                ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input" "button"]]
                                ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                ["[]" "client.comp.task" ":refer" ["[]" "comp-task"]]
                                ["[]" "clojure.string" ":as" "string"]
                                ["[]" "client.manager" ":refer" ["[]" "do-wheel!"]]]],
                          :defs {"comp-todolist" ["def"
                                                  "comp-todolist"
                                                  ["create-comp"
                                                   ":todolist"
                                                   ["fn"
                                                    ["tasks" "pointer"]
                                                    ["fn"
                                                     ["state" "mutate!"]
                                                     ["div"
                                                      ["{}" [":style" "style-container"]]
                                                      ["div"
                                                       ["{}"
                                                        [":style"
                                                         ["merge"
                                                          "style-list"
                                                          ["{}"
                                                           [":height"
                                                            ["str" ["+" "8" ["*" "40" ["count" "tasks"]]] "|px"]]]]]
                                                        [":event" ["{}" [":wheel" "on-scroll"]]]]
                                                       ["->>"
                                                        "tasks"
                                                        ["map-indexed"
                                                         ["fn"
                                                          ["idx" "task"]
                                                          ["[]"
                                                           [":id" "task"]
                                                           ["comp-task" "task" "idx" ["=" "pointer" "idx"]]]]]
                                                        ["sort-by" "first"]]]]]]]],
                                 "style-container" ["def"
                                                    "style-container"
                                                    ["{}" [":min-height" "100"] [":min-width" "400"]]],
                                 "style-list" ["def"
                                               "style-list"
                                               ["{}"
                                                [":position" ":relative"]
                                                [":margin-top" "120"]
                                                [":margin-left" "240"]]],
                                 "on-scroll" ["defn"
                                              "on-scroll"
                                              ["e" "dispatch!"]
                                              ["let"
                                               [["event" [":original-event" "e"]]]
                                               [".preventDefault" "event"]
                                               ["do-wheel!" [".-deltaY" "event"] "dispatch!"]]]},
                          :procs []},
         "schema" {:ns ["ns" "client.schema"],
                   :defs {"task" ["def" "task" ["{}" [":id" "nil"] [":text" "|"] [":done?" "false"]]],
                          "store" ["def"
                                   "store"
                                   ["{}"
                                    [":tasks" ["[]" ["merge" "task" ["{}" [":id" "0"] [":text" "|"]]]]]
                                    [":pointer" "0"]]]},
                   :procs []},
         "updater.core" {:ns ["ns" "client.updater.core" [":require" ["[]" "client.schema" ":as" "schema"]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op" "op-data" "op-time"]
                                           ["case"
                                            "op"
                                            [":task/add-before" ["add-before" "store" "op-data" "op-time"]]
                                            [":task/add-after" ["add-after" "store" "op-data" "op-time"]]
                                            [":task/edit"
                                             ["let"
                                              [[["[]" "idx" "text"] "op-data"]]
                                              ["update"
                                               "store"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["update" "tasks" "idx" ["fn" ["task"] ["assoc" "task" ":text" "text"]]]]]]]
                                            [":task/up" ["move-up" "store" "op-data" "op-time"]]
                                            [":task/down" ["move-down" "store" "op-data" "op-time"]]
                                            [":task/toggle"
                                             ["update-in" "store" ["[]" ":tasks" "op-data" ":done?"] "not"]]
                                            [":task/clear" "schema/store"]
                                            [":task/delete" ["delete-task" "store" "op-data" "op-time"]]
                                            [":pointer/touch" ["assoc" "store" ":pointer" "op-data"]]
                                            [":pointer/before"
                                             ["if"
                                              ["zero?" [":pointer" "store"]]
                                              "store"
                                              ["update" "store" ":pointer" "dec"]]]
                                            [":pointer/after"
                                             ["if"
                                              ["=" [":pointer" "store"] ["dec" ["count" [":tasks" "store"]]]]
                                              "store"
                                              ["update" "store" ":pointer" "inc"]]]
                                            "store"]],
                                "add-before" ["defn"
                                              "add-before"
                                              ["store" "idx" "op-time"]
                                              ["update"
                                               "store"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["let"
                                                 [["new-task"
                                                   ["merge" "schema/task" ["{}" [":id" "op-time"] [":text" "|"]]]]]
                                                 ["cond"
                                                  [["zero?" "idx"] ["into" ["[]"] ["cons" "new-task" "tasks"]]]
                                                  [":else"
                                                   ["into"
                                                    ["[]"]
                                                    ["concat"
                                                     ["subvec" "tasks" "0" "idx"]
                                                     ["[]" "new-task"]
                                                     ["subvec" "tasks" "idx"]]]]]]]]],
                                "add-after" ["defn"
                                             "add-after"
                                             ["store" "idx" "op-time"]
                                             ["->"
                                              "store"
                                              ["update"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["let"
                                                 [["new-task"
                                                   ["merge" "schema/task" ["{}" [":id" "op-time"] [":text" "|"]]]]]
                                                 ["cond"
                                                  [["=" "idx" ["dec" ["count" "tasks"]]] ["conj" "tasks" "new-task"]]
                                                  [":else"
                                                   ["into"
                                                    ["[]"]
                                                    ["concat"
                                                     ["subvec" "tasks" "0" ["inc" "idx"]]
                                                     ["[]" "new-task"]
                                                     ["subvec" "tasks" ["inc" "idx"]]]]]]]]]
                                              ["update" ":pointer" "inc"]]],
                                "move-up" ["defn"
                                           "move-up"
                                           ["store" "op-data" "op-time"]
                                           ["let"
                                            [["pointer" [":pointer" "store"]] ["head?" ["zero?" "pointer"]]]
                                            ["if"
                                             "head?"
                                             "store"
                                             ["->"
                                              "store"
                                              ["update"
                                               ":tasks"
                                               ["fn"
                                                ["tasks"]
                                                ["->"
                                                 "tasks"
                                                 ["assoc" "pointer" ["get" "tasks" ["dec" "pointer"]]]
                                                 ["assoc" ["dec" "pointer"] ["get" "tasks" "pointer"]]]]]
                                              ["update" ":pointer" "dec"]]]]],
                                "move-down" ["defn"
                                             "move-down"
                                             ["store" "op-data" "op-time"]
                                             ["let"
                                              [["pointer" [":pointer" "store"]]
                                               ["tail?" ["=" "pointer" ["dec" ["count" [":tasks" "store"]]]]]]
                                              ["if"
                                               "tail?"
                                               "store"
                                               ["->"
                                                "store"
                                                ["update"
                                                 ":tasks"
                                                 ["fn"
                                                  ["tasks"]
                                                  ["->"
                                                   "tasks"
                                                   ["assoc" "pointer" ["get" "tasks" ["inc" "pointer"]]]
                                                   ["assoc" ["inc" "pointer"] ["get" "tasks" "pointer"]]]]]
                                                ["update" ":pointer" "inc"]]]]],
                                "delete-task" ["defn"
                                               "delete-task"
                                               ["store" "op-data" "op-time"]
                                               ["if"
                                                ["=" "1" ["count" [":tasks" "store"]]]
                                                "store"
                                                ["cond"
                                                 [["zero?" "op-data"]
                                                  ["update" "store" ":tasks" ["fn" ["tasks"] ["subvec" "tasks" "1"]]]]
                                                 [["=" "op-data" ["dec" ["count" [":tasks" "store"]]]]
                                                  ["->"
                                                   "store"
                                                   ["update"
                                                    ":tasks"
                                                    ["fn" ["tasks"] ["subvec" "tasks" "0" ["dec" ["count" "tasks"]]]]]
                                                   ["update" ":pointer" "dec"]]]
                                                 [":else"
                                                  ["->"
                                                   "store"
                                                   ["update"
                                                    ":tasks"
                                                    ["fn"
                                                     ["tasks"]
                                                     ["into"
                                                      ["[]"]
                                                      ["concat"
                                                       ["subvec" "tasks" "0" "op-data"]
                                                       ["subvec" "tasks" ["inc" "op-data"]]]]]]
                                                   ["update" ":pointer" "dec"]]]]]]},
                         :procs []},
         "comp.task" {:ns ["ns"
                           "client.comp.task"
                           [":require"
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo-ui.style" ":as" "ui"]
                            ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                            ["[]" "clojure.string" ":as" "string"]]],
                      :defs {"on-input" ["defn"
                                         "on-input"
                                         ["idx"]
                                         ["fn" ["e" "dispatch!"] ["dispatch!" ":task/edit" ["[]" "idx" [":value" "e"]]]]],
                             "style-task" ["def"
                                           "style-task"
                                           ["{}"
                                            [":position" ":absolute"]
                                            [":padding" "|0 8px"]
                                            [":transition-duration" "|400ms"]
                                            [":align-items" ":center"]
                                            [":transform-origin" "|8% 50%"]]],
                             "on-touch" ["defn"
                                         "on-touch"
                                         ["idx"]
                                         ["fn" ["e" "dispatch!"] ["dispatch!" ":pointer/touch" "idx"]]],
                             "style-done" ["def"
                                           "style-done"
                                           ["{}"
                                            [":width" "16"]
                                            [":height" "16"]
                                            [":background-color" ["hsl" "200" "90" "80" "0.8"]]
                                            [":cursor" ":pointer"]
                                            [":transition-duration" "|300ms"]
                                            [":border-radius" "|50%"]
                                            [":box-shadow" ["str" "|0 0 4px " ["hsl" "0" "0" "0" "0.3"]]]]],
                             "comp-task" ["def"
                                          "comp-task"
                                          ["create-comp"
                                           ":task"
                                           ["fn"
                                            ["task" "idx" "focused?"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "ui/row"
                                                 "style-task"
                                                 ["{}" [":top" ["str" ["*" "idx" "44"] "|px"]]]
                                                 ["if"
                                                  [":done?" "task"]
                                                  ["{}" [":margin-left" "32"] [":opacity" "0.5"]]]
                                                 ["if" "focused?" ["{}" [":transform" "|scale(1.1)"]]]]]
                                               [":event" ["{}"]]]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["merge"
                                                  "style-done"
                                                  ["if" [":done?" "task"] ["{}" [":transform" "|scale(0.8)"]]]]]
                                                [":event" ["{}" [":click" ["on-toggle" "idx"]]]]]]
                                              ["comp-space" "8" "nil"]
                                              ["input"
                                               ["{}"
                                                [":style" ["merge" "ui/input" "style-text"]]
                                                [":attrs"
                                                 ["{}"
                                                  [":value" [":text" "task"]]
                                                  [":placeholder" "|Task content"]
                                                  [":id" ["str" "|input-" "idx"]]]]
                                                [":event"
                                                 ["{}"
                                                  [":input" ["on-input" "idx"]]
                                                  [":blur" ["on-blur" ["string/blank?" [":text" "task"]] "idx"]]
                                                  [":keydown" ["on-keydown" "idx"]]
                                                  [":click" ["on-touch" "idx"]]]]]]]]]]],
                             "on-toggle" ["defn"
                                          "on-toggle"
                                          ["idx"]
                                          ["fn" ["e" "dispatch!"] ["dispatch!" ":task/toggle" "idx"]]],
                             "on-blur" ["defn"
                                        "on-blur"
                                        ["cleared?" "idx"]
                                        ["fn" ["e" "dispatch!"] ["if" "cleared?" ["dispatch!" ":task/delete" "idx"]]]],
                             "style-text" ["def"
                                           "style-text"
                                           ["{}"
                                            [":width" "480"]
                                            [":background-color" ":transparent"]
                                            [":color" ":white"]
                                            [":font-size" "16"]
                                            [":font-family" "|Hind"]
                                            [":font-weight" "300"]
                                            [":padding" "|0 4px"]
                                            [":line-height" "|16px"]]],
                             "on-keydown" ["defn"
                                           "on-keydown"
                                           ["idx"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["let"
                                             [["event" [":original-event" "e"]] ["shift?" [".-shiftKey" "event"]]]
                                             ["cond"
                                              [["and" "shift?" ["=" "13" [":key-code" "e"]]]
                                               ["dispatch!" ":task/add-before" "idx"]]
                                              [["and" ["not" "shift?"] ["=" "13" [":key-code" "e"]]]
                                               ["dispatch!" ":task/add-after" "idx"]]
                                              [["and" "shift?" ["=" "9" [":key-code" "e"]]]
                                               ["do" [".preventDefault" "event"] ["dispatch!" ":pointer/before" "nil"]]]
                                              [["and" ["not" "shift?"] ["=" "9" [":key-code" "e"]]]
                                               ["do" [".preventDefault" "event"] ["dispatch!" ":pointer/after" "nil"]]]]]]]},
                      :procs []},
         "manager" {:ns ["ns"
                         "client.manager"
                         [":require" ["[]" "cljs.core.async" ":refer" ["[]" "chan" "timeout" ">!" "<!" "alts!"]]]
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go" "go-loop"]]]],
                    :defs {"chan-wheel" ["defonce" "chan-wheel" ["chan"]],
                           "do-wheel!" ["defn"
                                        "do-wheel!"
                                        ["dy" "dispatch!"]
                                        ["go" [">!" "chan-wheel" ["[]" "dy" "dispatch!"]]]],
                           "listen-wheel!" ["defn"
                                            "listen-wheel!"
                                            []
                                            ["go-loop"
                                             ["[]" "st" "nil" "last-dy" "0" "last-dispatch!" "nil"]
                                             ["if"
                                              ["nil?" "st"]
                                              ["let"
                                               [[["[]" "dy" "dispatch!"] ["<!" "chan-wheel"]]]
                                               ["recur" ["timeout" "400"] ["+" "last-dy" "dy"] "dispatch!"]]
                                              ["let"
                                               [["step" "40"] [["[]" "v" "c"] ["alts!" ["[]" "st" "chan-wheel"]]]]
                                               ["cond"
                                                [["=" "c" "st"] ["recur" "nil" "0" "last-dispatch!"]]
                                                [["=" "c" "chan-wheel"]
                                                 ["let"
                                                  [[["[]" "dy" "dispatch!"] "v"]]
                                                  ["cond"
                                                   [[">" "last-dy" "step"]
                                                    ["do"
                                                     ["last-dispatch!" ":task/up" "nil"]
                                                     ["recur" "st" ["-" "last-dy" "step"] "dispatch!"]]]
                                                   [["<" "last-dy" ["-" "0" "step"]]
                                                    ["do"
                                                     ["last-dispatch!" ":task/down" "nil"]
                                                     ["recur" "st" ["+" "last-dy" "step"] "dispatch!"]]]
                                                   [":else" ["recur" "st" ["+" "last-dy" "dy"] "dispatch!"]]]]]]]]]]},
                    :procs []}}}
